화살표함수는 굳이 return을 사용해줄필요가 없음

state가 바뀌면 리렌더링이 발생한다.
이렇게 리렌더링이 일어나도, 바뀐부분만 새로 생성한다->리엑트.js의 특징

1. setCounter(   (current)   => current +1);
2. setCounter(counter+1);
state함수에는 함수를 넣어주고, return 값으로 보내주면 된다.
1번 사용방법이 2번 사용방법보다 안전하다
current가 현재값임을 보장해준다.


label은 input이랑 연결해주기위해서 사용한다.

label for="minute"
input id="minute"
으로 연결해주고 label의 글씨를 클릭하면
input에 입력할수있도록 focus가 간다.
for는 자바스크립트 언어이기때문에
JSX에서는 htmlFor를 사용해서 html으로갔을때 잘 작동하게 해줘야한다.
html에서 for처럼 작동해야해서 이름을 이렇게 지어준듯?
input 의 기본 value는 uncontrolled 라서 수정이 안됨
value로 값을 변경하고 싶으면 onChange event를 사용해야한다.

state를 통해 UI를 수정할수 있다.
divide and conquer


JSX안에 {}(중괄호)를 사용하면 JS(자바스크립트)를 사용할수 있다.

select 태그에 value={index} 처음 index에 해당하는 option의 value를 가리키게된다.

[리렌더링 조건]
1) props이 바뀔때
2) state가 바뀔때
3) 부모 컴포넌트가 리렌더링 될 때



///////////////////PROPS////////////////////////////////
부모 컴포넌트에서 자식컴포넌트로 데이터를 보낼수 있다.
함수형 컴포넌트

PROPS는 새로운 정보를 컴포넌트에 전달하는 목적
PROPS는 객체이다.
( { banana} ) 이렇게 바로 객체를 꺼내올수있다.
props가 객체라는것을 알기 때문에


fontsize : big ? 18 : 15, -> React 삼항연산자
커스텀 컴포넌트에 onClick 을 쓰게되면 이건 일반 prop이고, 이벤트 리스너가 아니다.
button같은 태그에 사용해야 이벤트리스너 역활을 한다.
props는 숫자외에 다른것들도 보낼수있다.
대신 prop는 항상 명시해줘야 사용할수 있다.

props가 변경되지 않는선에서 리렌더링을 멈춰달라고 할수 있다. -> React Memo 라고 한다.

부모 state가 변경되는 순간 해당 부모의 자식 컴포넌트는 모드 re-rendering 될것이다. -> 이것은 추후에 내 어플리 케이션이 느려지는 원인이 될수 있다.

const MemorizedBtn = React.mem0(Btn);
이를 통해 변경되지 않는 컴포넌트를 리랜더딩하는것을 막을수 있다.
PropType을 통해 타입을 검사할수 있다.
ReactJS는 모르기때문에 패키지 설치후 사용해야한다.

Btn,propsTypes ={
text : PropsTypes.string,
fontSzie : PropTypes.number,
}
이런식으로 타입을 지정해주면,
잘못된 type으로 props에 오면 콘솔창에 오류가 뜬다
-----> ReactJS가 사용자에게 오류를 알려준다.

npm i prop-types 을 통해 propsTypes을 사용할수 있도록 패키지를 설치해준다.


api 처럼 한번 받아오고나서 계속 호출해주기 어려운것들이 존재한다 -> useeffect를 사용해서 처음에만 호출하고, 다른 state


useEffect( 실행시키고싶은것,[dependence] )
useEffect로 한번만 가져오고, 다른 state가 변경될때, 리렌더링을 시키고 싶지 않은것을 사용할때 사용!

한번만 렌더링하고싶을때, 계속 랜더링하고싶을때, 어떤 조건에서만 랜더링하고 싶을때, 3가지로 나눠서 사용할수 있다.

useEffect는 App이 다 랜더링된 후에 실행된다.
조건이든 아니든 처음에는 무조건 실행된다.
deps=[]에 event,run 이 있다면, 배열안에있는 변수가 변화가 생기면 리렌더링후 호출

useEffect는 만들수도 있고, destory도 시킬수 있다.
hide가 아닌 dsestory라는것을 명심!
function을 안쓰는 이유는 그냥 코드가 길어서
map 사용시  element에 key값을 줘야한다.



fetch then 대신에 async-await를 사용한다.


key값은 고유한값을 줘야하는데 id가 없을때 출력하고 싶은 값이 고유하다가면 그자체를 key로 줘도 무방하다

hashRouter를 사용하면 #이 주소에 붙는다.
BrowserRouter는#이 안붙는다.
a link는 페이지를 리로드한다(깜빡임현상)
path에 지정된 컴포넌트를 실행한다.

/:id 를 경로로 쓰면 숫자로 인식

useParams를 통해 라우터가 전송해주는 id값을 알수 있다.

억음부호JS문법이라서 {}가 필요하다. {}안에 텍스트를 넣으려면 ``을 통해 작성하고 그 안에 변수를 넣고 싶으면 ${}을 통해 작성

npm i gh-pages
npm deploy를 하면 자동으로 깃허브에 올라간다.